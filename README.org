# -*- ii: enabled; -*-
#+TITLE: kubemacs

* Introduction

ii brings a number of technologies together to create an open workflow.
Using docker will reduce the setup and maintenance of sharing the core components with others.

* Core Components

- [[http://spacemacs.org/][Spac(emacs)]]
- [[https://orgmode.org/][Orgmode]]
- [[https://gitlab.com/oer/oer-reveal][oer-reveal]]

* Build

#+BEGIN_SRC tmate
IMAGE_TAG=gcr.io/apisnoop/kubemacs:0.9.23
docker build -t $IMAGE_TAG .
kind load docker-image --nodes kind-worker $IMAGE_TAG
#+END_SRC


* Docker run cloud-native k8s dev env
** Environment for docker-init

Customize with your own email and repos (usually forks) to check out.

   #+name: kubemacs-dev.env
   #+begin_src shell :tangle test-writing.env
     # Pin your image
     # KUBEMACS_IMAGE=kubemacs/kubemacs:2020.02.19
     # Or not
     KUBEMACS_IMAGE=kubemacs/kubemacs:latest
     # $(id -u) / mainly for ~/.kube/config permissions
     HOST_UID="1000"
     # Vars for git commits
     KUBEMACS_GIT_EMAIL=hh@ii.coop
     KUBEMACS_GIT_NAME="Hippie Hacker"
     KUBEMACS_TIMEZONE=Pacific/Auckland
     # This is the kind cluster name, maybe we should rename
     # for some reason we can't used kind as the name
     KUBEMACS_KIND_NAME=kubemacs
     # ~/.kube/$KUBEMACS_HOSTCONFIG_NAME
     KUBEMACS_HOST_KUBECONFIG_NAME=config
     # Using a docker registry alongside kind
     KIND_LOCAL_REGISTRY_ENABLE=true
     KIND_LOCAL_REGISTRY_NAME=local-registry
     KIND_LOCAL_REGISTRY_PORT=5000
     # Defaults to home
     KUBEMACS_INIT_DEFAULT_REPOS_FOLDER=/home/ii
     # The repositories to check out
     KUBEMACS_INIT_DEFAULT_REPOS='https://github.com/kubemacs/kubemacs.git'
     # The folder to start tmate/emacs in
     KUBEMACS_INIT_DEFAULT_DIR=kubemacs
     # The first file you want emacs to open
     KUBEMACS_INIT_ORG_FILE=kubemacs/kubemacs.org
     # If you want to see lots of information
     KUBEMACS_INIT_DEBUG=true
   #+end_src

** Running Docker
   #+name: kubemacs-dev.sh
   #+begin_src shell :tangle kubemacs-dev.sh
     ENV_FILE=test-writing.env
     . $ENV_FILE
     docker run \
            --env-file $ENV_FILE \
            --name kubemacs-docker-init \
            --user root \
            --privileged \
            --network host \
            --rm \
            -it \
            -v "$HOME/.kube:/tmp/.kube" \
            -v /var/run/docker.sock:/var/run/docker.sock \
            $KUBEMACS_IMAGE \
            docker-init.sh
   #+end_src

* Initializing only with Docker
#+begin_src shell
  ENV_FILE=test-writing.env
  . $ENV_FILE
     -e KUBEMACS_INIT_DEFAULT_REPOS="https://github.com/cncf/apisnoop https://github.com/kubernetes/kubernetes" \
     -e KUBEMACS_INIT_ORG_FILE="\$HOME/Projects/apisnoop/deployment/k8s/xip.io/README.org" \
     -e KUBEMACS_DEFAULT_KIND_NAME=kind-self-init-test \
     -e HOST_UID="$(id -u)" \
     -e KUBEMACS_HOST_KUBECONFIG_NAME=config-kind-my-cluster \
     --user root \
     --network host \
     gcr.io/kubemacs/kubemacs:latest \
     bash /usr/local/bin/self-init.sh
#+end_src

** Environment variables

| Property                           | Default value    |
|------------------------------------+------------------|
| KUBEMACS_IMAGE                     |                  |
| KUBEMACS_INIT_SELF_CONTAINER_NAME  | kubemacs-init    |
| KUBEMACS_INIT_DEBUG                | false            |
| KUBEMACS_HOST_KUBECONFIG_NAME      | config-kind      |
| KUBEMACS_DEFAULT_KIND_NAME         | kind             |
| KUBEMACS_GIT_EMAIL                 |                  |
| KUBEMACS_GIT_NAME                  |                  |
| KUBEMACS_TIMEZONE                  | Pacific/Auckland |
| KUBEMACS_INIT_DEFAULT_REPOS        |                  |
| KUBEMACS_INIT_DEFAULT_REPOS_FOLDER | /home/ii/        |
| KUBEMACS_INIT_DEFAULT_DIR          | /home/ii         |
| KUBEMACS_INIT_ORG_FILE             |                  |
| HOST_UID                           | 0                |

* Running in k8s
** Deployment   
   #+begin_src shell
   kubectl apply -f kubemacs.yaml
   #+end_src
** Attaching to the Pod
   #+begin_src shell
     PODNAME=$(kubectl -n kubemacs get pod --selector=app=kubemacs -o name  | sed s:pod/::)
     kubectl exec -n kubemacs -t -i $PODNAME -- attach
   #+end_src
* dev-build loop
  #+begin_src shell
    IIDE=gcr.io/apisnoop/kubemacs:0.9.23
    PODNAME=$(kubectl -n kubemacs get pod --selector=app=kubemacs -o name  | sed s:pod/::)
    docker build -t $IIDE .
    kind load docker-image $IIDE
    kubectl run --generator=run-pod/v1 $PODNAME --serviceaccount='admin-kubemacs' --image=$IIDE
    kubectl exec -t -i $PODNAME -- attach # osc52 will be sent with tmate url / you can have multiple of these
  #+end_src
* Script to connect to a remote box and configure your kubeconfig
  #+begin_src shell
    # configuration
    export KUBECONFIG=~/.kube/config-my-remote
    # [IMPORTANT] set your user
    REMOTE_USER=root
    # [IMPORTANT] set your remote box's IP
    REMOTE_HOST=x.x.x.x

    # fetch the remote kubeconfig
    ssh $REMOTE_USER@$REMOTE_HOST kubectl config view --merge --minify --flatten > $KUBECONFIG

    # find the port of the Kubernetes API in the kubeconfig and export it
    export K8S_REMOTE_PORT=$(kubectl config view -o jsonpath='{.clusters[0].cluster.server}' | cut -d ':' -f3)
    # forward the port from the remote box to the localhost
    ssh -fN -L $K8S_REMOTE_PORT:localhost:$K8S_REMOTE_PORT $REMOTE_USER@$REMOTE_HOST
  #+end_src

  #+begin_src shell
  kubectl get pods -A
  #+end_src

**  Add a helper function to your ~/.bashrc
  | Name          | Purpose                           | Example                  |
  |---------------+-----------------------------------+--------------------------|
  | ~KUBECONFIG~  | the kubeconfig to save to and use | ~/.kube/config-my-remote |
  | ~REMOTE_USER~ | the remote user to login as       | ii                       |
  | ~REMOTE_HOST~ | the remote host/ip to connect to  | myhost.example.com       |
  |---------------+-----------------------------------+--------------------------|
  #+begin_src shell
    cat << EOF >> ~/.bashrc
    function ii_setup_k8s_from_remote() {
    # ensure:
    # - remote server kubeconfig
    # - defined $KUBECONFIG
    # - remote server Kubernetes API forwarded to localhost

    function ii_setup_k8s_from_remote_cleanup() {
      set +e
    }

    trap ii_setup_k8s_from_remote_cleanup EXIT

    set -e

    if [ -x /tmp/ii_setup_k8s_from_remote-hasrun ]; then
            return
    fi

    # configuration
    if [ -z \$KUBECONFIG ]; then
      export KUBECONFIG=~/.kube/config-my-remote
    fi

    # [IMPORTANT] set your user
    if [ -z \$REMOTE_USER ]; then
       echo "[error] please set \\\$REMOTE_USER"
       return
    fi

    # [IMPORTANT] set your remote box's IP
    if [ -z \$REMOTE_HOST ]; then
       echo "[error] please set \\\$REMOTE_HOST"
       return
    fi

    # fetch the remote kubeconfig
    ssh \$REMOTE_USER@\$REMOTE_HOST kubectl config view --merge --minify --flatten > \$KUBECONFIG

    # find the port of the Kubernetes API in the kubeconfig and export it
    export K8S_REMOTE_PORT=\$(kubectl config view -o jsonpath='{.clusters[0].cluster.server}' | cut -d ':' -f3)

    # check if not already listening
    if ! lsof -i:\$K8S_REMOTE_PORT 2>&1 > /dev/null; then
      # forward the port from the remote box to the localhost
      ssh -fN -L \$K8S_REMOTE_PORT:localhost:\$K8S_REMOTE_PORT \$REMOTE_USER@\$REMOTE_HOST
    fi

    export DOCKER_HOST="ssh://\\\$REMOTE_USER@\\\$REMOTE_HOST"
    echo "[ok]"
    touch /tmp/ii_setup_k8s_from_remote-hasrun
    ii_setup_k8s_from_remote_cleanup

    }
    EOF

  #+end_src

